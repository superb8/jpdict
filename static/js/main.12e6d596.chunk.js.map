{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PAGECOUNT","Dict","styled","div","Head","WORDS","RAW_WORDS","map","e","i","App","effect","deps","delay","inputRef","useRef","useState","searchText","setSearchText","words","setWords","_tabIndex","setTabIndex","tabIndex","Math","max","min","length","_searchText","current","value","trim","patterns","split","filter","RegExp","w","some","p","exec","useEffect","handler","setTimeout","clearTimeout","console","log","wanakana","customKanaMapping","tabLinks","push","className","onClick","evt","ceil","ref","onChange","target","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+8kXAOMA,EAAY,IAEdC,EAAOC,IAAOC,IAAV,4KAcJC,EAAOF,IAAOC,IAAV,saAmCJE,EAAQC,EAAUC,KAAI,SAACC,EAAEC,GAAH,OAAQA,EAAE,GAAV,mBAAeD,OAwD1BE,MAtDf,WACC,IAZkCC,EAAQC,EAAMC,EAY5CC,EAAWC,iBAAO,MADR,EAEmBC,mBAAS,IAF5B,mBAETC,EAFS,KAEEC,EAFF,OAGSF,mBAASX,GAHlB,mBAGTc,EAHS,KAGHC,EAHG,OAIiBJ,mBAAS,GAJ1B,mBAITK,EAJS,KAIEC,EAJF,KAKVC,EAAWC,KAAKC,IAAID,KAAKE,IAAIL,EAAWF,EAAMQ,OAAO3B,EAAU,GAAI,GAhBrCW,EAkBf,WAClB,IAAIiB,EAAcd,EAASe,QAAQC,MAAMC,OACzC,GAAIH,EAAYD,OAAO,EACtB,IACC,IAAIK,EAAWJ,EAAYK,MAAM,KAAKC,QAAO,SAAA1B,GAAC,OAAEA,KAAGD,KAAI,SAAAC,GAAC,OAAE,IAAI2B,OAAO3B,MACrEY,EAASf,EAAM6B,QAAO,mCAAIE,GAAJ,uBAAWJ,EAASK,MAAK,SAAAC,GAAC,OAAEA,EAAEC,KAAKH,UACxD,eAEFhB,EAASf,IA1B+BO,EA2BvC,CAACK,EAAYH,GA3BgCD,EA2BrB,IA1BxB2B,qBAAU,WACN,IAAMC,EAAUC,YAAW,kBAAM/B,MAAUE,GAE3C,OAAO,kBAAM8B,aAAaF,MAHrB,sBAKF7B,GAAQ,IALN,CAKUC,KAuBtB+B,QAAQC,IAAI5B,GAEZuB,qBAAU,WAET1B,EAASe,SAAWiB,OAAchC,EAASe,QAAS,CACnDkB,kBAAmB,CAAE,IAAK,IAAK,IAAI,IAAK,EAAI,IAAK,IAAI,IAAK,IAAI,IAAK,IAAI,IAAK,IAAI,SAE/E,CAACjC,IAGJ,IADA,IAAIkC,EAAW,GA3BD,WA4BLvC,GACJc,IAAWd,EACduC,EAASC,KAAK,sBAAMC,UAAU,UAAUC,QAAS,SAAAC,GAAG,OAAE9B,EAAYb,IAApD,SAAyDA,EAAE,KAEzEuC,EAASC,KAAK,mBAAGC,UAAU,UAAb,SAAwBzC,EAAE,MAJjCA,EAAE,EAAGA,EAAEe,KAAK6B,KAAKlC,EAAMQ,OAAO3B,GAAYS,GAAG,EAAI,EAAjDA,GAQT,OACA,eAACR,EAAD,WACC,eAACG,EAAD,WACC,qDAAQ,uBAAOkD,IAAKxC,EAAUyC,SAAU,SAAAH,GAAG,OAAElC,EAAckC,EAAII,OAAO1B,aACtE,8BAAMkB,OAGP,6BAEC7B,EAAMsC,MAAMlC,EAASvB,GAAYuB,EAAS,GAAGvB,GAAWO,KAAI,YAAY,IAAD,mBAATE,EAAS,KAAP2B,EAAO,UACtE,OAAO,oBAAYN,MAAOrB,EAAnB,SAAuB2B,GAAd3B,YC9FLiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.12e6d596.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nimport './App.css';\nimport RAW_WORDS from './words.json';\nimport styled from 'styled-components';\nimport * as wanakana from 'wanakana';\n\nconst PAGECOUNT = 1000;\n\nlet Dict = styled.div`\n\twidth: 320px;\n    margin: 0 auto;\n    padding: 0 4px;\n\t\n\t& ol {\n\t\tmargin-top: 0;\n\t}\n\t\n\t& ol li {\n\t\tmargin-left: 1rem;\n\t}\n`\n\nlet Head = styled.div`\n    top: 0px;\n    position: sticky;\n    background: white;\n\tpadding-bottom: 1rem;\n\tfont-size:1.2rem;\n\t\n\t& > div {\n\t\tdisplay: flex;\n\t\tjustify-content: space-evenly;\n\t}\n\t\n\tinput {\n\t\tflex-grow: 1;\n\t}\n\t\n\t.tabLink {\n\t\tpadding: 0.2rem;\n\t\tmargin-top:0.1rem;\n\t\tmargin-left:0.1rem;\n\t\tmargin-right:0.1rem;\n\t\tmargin-bottom:0.1rem;\n\t\tcursor: pointer;\n\t}\n`\n\nexport const useDebouncedEffect = (effect, deps, delay) => {\n    useEffect(() => {\n        const handler = setTimeout(() => effect(), delay);\n\n        return () => clearTimeout(handler);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [...deps || [], delay]);\n}\n\nlet WORDS = RAW_WORDS.map((e,i)=>[i+1,...e])\n\nfunction App() {\n\tlet inputRef = useRef(null);\n\tlet [searchText,setSearchText] = useState('');\n\tlet [words,setWords] = useState(WORDS);\n\tlet [_tabIndex, setTabIndex] = useState(0);\n\tlet tabIndex = Math.max(Math.min(_tabIndex, words.length/PAGECOUNT-1), 0)\n\t\n\tuseDebouncedEffect(()=>{\n\t\tlet _searchText = inputRef.current.value.trim()\n\t\tif (_searchText.length>0) {\n\t\t\ttry {\n\t\t\t\tlet patterns = _searchText.split(' ').filter(e=>e).map(e=>new RegExp(e))\n\t\t\t\tsetWords(WORDS.filter(([i,w,n])=>patterns.some(p=>p.exec(w))));\n\t\t\t} catch {}\n\t\t} else\n\t\t\tsetWords(WORDS);\n\t}, [searchText, inputRef], 500)\n\t\n\tconsole.log(searchText)\n\t\n\tuseEffect(()=>{\n\t\t\n\t\tinputRef.current && wanakana.bind(inputRef.current, {\n\t\t\tcustomKanaMapping: { '.': '.', '^':'^', '$':'$', '+':'+', '?':'?', '[':'[', ']':']' }\n\t\t})\n\t}, [inputRef])\n\t\n\tlet tabLinks = []\n\tfor (let i=0; i<Math.ceil(words.length/PAGECOUNT); i+=1) {\n\t\tif (tabIndex!==i) {\n\t\t\ttabLinks.push(<span className=\"tabLink\" onClick={evt=>setTabIndex(i)}>{i+1}</span>)\n\t\t} else {\n\t\t\ttabLinks.push(<b className=\"tabLink\">{i+1}</b>)\n\t\t}\n\t}\n\t\n\treturn (\n\t<Dict>\n\t\t<Head>\n\t\t\t<div>搜索：<input ref={inputRef} onChange={evt=>setSearchText(evt.target.value)}/></div>\n\t\t\t<div>{tabLinks}</div>\n\t\t</Head>\n\t\t\n\t\t<ol>\n\t\t{\n\t\t\twords.slice(tabIndex*PAGECOUNT, (tabIndex+1)*PAGECOUNT).map(([i,w,n])=>{\n\t\t\t\treturn <li key={i} value={i}>{w}</li>\n\t\t\t})\n\t\t}\n\t\t</ol>\n\t</Dict>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}